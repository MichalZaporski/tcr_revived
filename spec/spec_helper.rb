# require 'debug'

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
module SpawnTestServers
  # Spawn a new server that will send the specified payload when connected to.
  # The listening port number will be returned
  def spawn_server(payload)
    server = TCPServer.new('127.0.0.1', 0)
    fork do
      client = server.accept
      client.write(payload)
      client.close
    end
    server.addr[1]
  end
end

module TmpFileHelper
  # @return [String]
  def temp_dir
    ::File.expand_path('tmp', __dir__)
  end

  # @param file_name [String]
  # @return [String]
  def temp_file_path(file_name)
    ::File.join(temp_dir, file_name)
  end

  # @param file_name [String]
  # @return [Boolean]
  def temp_file?(file_name)
    ::File.exist? temp_file_path(file_name)
  end

  # @param extension[String]
  # @return [Boolean]
  def temp_cassette?(extension)
    temp_file? temp_cassette_name(extension)
  end

  # @param extension [String, nil]
  # @return [String]
  def temp_cassette_name(extension = nil)
    name = 'test'
    name = "#{name}.#{extension}" if extension

    name
  end

  # @param extension [String, nil]
  # @return [String]
  def temp_cassette_path(extension = nil)
    temp_file_path(temp_cassette_name(extension))
  end

  # Deletes a temp file.
  # Raises an error when no such temporary file.
  #
  # @param file_name [String]
  # @return [Integer]
  def del_temp_file!(file_name)
    ::File.unlink temp_file_path(file_name)
  end

  # Deletes a temp file.
  # Returns `nil` if no such file.
  #
  # @param file_name [String]
  # @return [Integer, nil]
  def del_temp_file(file_name)
    del_temp_file!(file_name) if temp_file?(file_name)
  end

  # Deletes a temp cassette.
  # Returns `nil` if no such file.
  #
  # @param extension [String]
  # @return [Integer, nil]
  def del_temp_cassette(extension)
    del_temp_file temp_cassette_name(extension)
  end

  # @return [void]
  def del_temp_files
    del_temp_cassette('json')
    del_temp_cassette('yaml')
    del_temp_cassette('marshal')
  end
end

# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  config.include SpawnTestServers
  config.include TmpFileHelper
end
